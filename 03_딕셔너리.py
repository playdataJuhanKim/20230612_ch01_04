#딕셔너리

worrior = [500,100,15.5,27] #인덱스가 특정한 값에 대해 설명해 주지 않음. 위치임.
print(worrior)

#해시맵 ,맵, 오브젝트, 딕셔너리 ... -> 값들의 묶음(시퀀스?)에서  그 값이 어떤 특징, 속성을 가지고 있는지 설명하는 자료형이 있다.

worrior = {"hp":500, "mp":100, "atk":15.5, "def":27}
print(worrior)

#딕셔너리 만들기
'''
딕셔너리 = {키1 : 값1, 키2 : 값2 ...}
키는 서로 겹치면 안되며, 수정할 수 없는 값이다. 각 키와 값 쌍은 ,로 구분
'''
lee={'name':'덕남', 'name':'정한'}
print(lee) # 키가 겹치면 가장 마지막에 있는 쌍(pair)에 있는 값을 불러옴.
#키(key)에는 문자열 외에도 수정되지 않는 값은 모두 넣을 수 있음.
#리스트나 딕셔너리를 제외한 나머지 자료형들은 수정되지 않기 때문에 넣을 수 있음.


#딕셔너리 키에 접근 및 할당
#리스트의 경우는 리스트[인덱스] -> 리스트[인덱스]=새로운 값으로 할당함.
#딕셔너리의 키도 리스트의 인데스와 비슷한 활용이 가능하다. 리스트의 요소를 인덱스로 호출하듯이 딕셔너리의 요소를 키로 호출함.
#딕셔너리[키]

print(worrior['hp'])
worrior['hp'] = 430
print(worrior['hp'])

x={}
x['ice'] = 'cream' #빈 딕셔너리에 새로운 키와 값을 넣을 수 있음. 리스트는 없는 인덱스(번호)에 새로 값을 넣을 수 없음.
print(x)

#딕셔너리 안에 키가 있는지 확인 ->key in 딕셔너리
data={'kim' : 100, 'lee' : 200, 'lee' : 300}
print('kim' in data)
print('lee' in data)
print(100 in data) #값(value)는 in으로 딕셔너리에서 찾을 수 없음.

print(len(data)) #key의 개수를 반환함. (중복된 키는 세지 않음.)